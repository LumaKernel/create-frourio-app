name: Node.js CI

on:
  push:
  pull_request:
  schedule:
    - cron:  '0 10 * * *'

jobs:
  test:
    name: "Test on Node:${{ matrix.node-version }} OS:ubuntu-latest"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [10, 12, 14]
    services:
      postgres:
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: postgres
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    env:
      API_ORIGIN: http://localhost:8080
      BASE_PATH: /api
      NODE_ENV: test
    steps:
      - uses: actions/checkout@v2
      - name: setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: "node_modules"
          key: ${{ runner.os }}-node-v${{ matrix.node-version }}-yarn-${{ hashFiles('yarn.lock') }}-3
      - run: yarn --frozen-lockfile
        if: steps.yarn-cache.outputs.cache-hit != 'true'
      - run: yarn lint
      - run: yarn build
      - run: yarn typecheck

      - run: |
          sudo systemctl start mysql.service
      - run: yarn test
        env:
          TEST_CFA_RANDOM_NUM: 3
          TEST_PG_PORT: 5432
          TEST_PG_PASSWORD: postgres
          TEST_MYSQL_PORT: 3306

  test-win:
    name: "Test on Node:${{ matrix.node-version }} OS:windows-latest"
    runs-on: windows-latest
    strategy:
      matrix:
        node-version: [14]
    env:
      API_ORIGIN: http://localhost:8080
      BASE_PATH: /api
      NODE_ENV: test
    steps:
      - uses: actions/checkout@v2
      - name: setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: "node_modules"
          key: ${{ runner.os }}-node-v${{ matrix.node-version }}-yarn-${{ hashFiles('yarn.lock') }}-3
      - run: yarn --frozen-lockfile
        if: steps.yarn-cache.outputs.cache-hit != 'true'
      - run: yarn build
      - run: yarn typecheck
      - run: yarn test
        env:
          TEST_CFA_RANDOM_NUM: 3
          TEST_SQLITE_ONLY: "yes"

  release:
    runs-on: ubuntu-latest
    needs: [test, test-win]
    if: contains(github.ref, 'tags/v')
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "12.x"
          registry-url: "https://registry.npmjs.org"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: "node_modules"
          key: ${{ runner.os }}-node-v12-yarn-${{ hashFiles('yarn.lock') }}
      - run: yarn --frozen-lockfile
        if: steps.yarn-cache.outputs.cache-hit != 'true'
      - run: yarn build
      - run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
